// Copyright (c) 2022 Target Brands, Inc. All rights reserved.
//
// Use of this source code is governed by the LICENSE file in this repository.

// ┌┐ ┬ ┬┌┬┐┌┬┐┌─┐┌┐┌┌─┐
// ├┴┐│ │ │  │ │ ││││└─┐
// └─┘└─┘ ┴  ┴ └─┘┘└┘└─┘

// usage:
// <button class="button">Ok</button>
// <button class="button -outline">Ok</button>
// <button class="button"><svg>..</svg> Ok</button>
// <a class="button" href="..">Ok</a>
// <button class="button -icon"><svg>..</svg></button>
//
// <div class="buttons">
//   <button class="button">Ok</button>
//   <button class="button -outline">Cancel</button>
// </div>

.button {
  display: inline-block;
  align-content: center;
  align-items: center;
  justify-content: center;
  width: auto;
  max-width: 100%;
  padding: 0.4rem 1.2rem;

  color: var(--color-bg);
  font-weight: bold;
  font-size: 1rem;
  line-height: 1.5;
  white-space: nowrap;
  text-align: center;
  text-decoration: none;

  background-color: var(--color-primary);
  border: var(--line-width) solid transparent;
  outline: none;
  cursor: pointer;

  user-select: none;

  // for buttons with icons
  // expects SVG icon and
  // assumes it is rendered first
  >svg {
    display: inline-block;
    margin-right: 0.5rem;

    vertical-align: text-bottom;
  }

  &:hover,
  &:focus,
  &:active {
    color: var(--color-primary);

    background-color: var(--color-bg);
    border-color: var(--color-primary);
  }

  &:focus {
    outline: var(--color-secondary) dotted var(--line-width);
    outline-offset: var(--line-width);
  }

  &:disabled {
    background-color: var(--color-bg-light);

    pointer-events: none;
  }

  &.-success {
    background-color: var(--color-green);
    cursor: default;
  }

  // not resetting cursor on failure state
  // with assumption that there will be
  // retry logic by default
  &.-failure {
    background-color: var(--color-red);
  }

  &.-loading,
  &.-running {
    background-color: var(--color-yellow);
    cursor: default;
  }
}

// special case where we add animation to
// a failure state button
// TODO: move to separate file?
.-failure {
  &.-animate-rotate {
    >svg {
      transition: transform 0.2s ease-in-out;
    }

    &:hover svg,
    &:focus svg {
      transform: rotate(0.5turn);

      transition: transform 0.2s ease-in-out;
    }
  }
}

// outline style buttons
.button.-outline {
  color: var(--color-primary);

  background-color: var(--color-bg);
  border-color: var(--color-primary);

  &:hover,
  &:focus,
  &:active {
    color: var(--color-bg);

    background-color: var(--color-primary);
    border-color: transparent;
  }

  &:focus {
    outline: var(--color-secondary) dotted var(--line-width);
    outline-offset: var(--line-width);
  }

  &:disabled {
    color: var(--color-bg-light);

    border-color: var(--color-bg-light);
  }

  &.-success {
    color: var(--color-green);

    border-color: var(--color-green);
    cursor: default;
  }

  // not resetting cursor on failure state
  // with assumption that there will be
  // retry logic by default
  &.-failure {
    color: var(--color-red);

    border-color: var(--color-red);
  }

  &.-loading,
  &.-running {
    color: var(--color-yellow);

    border-color: var(--color-yellow);
    cursor: default;
  }

  &.-success,
  &.-failure,
  &.-loading,
  &.-running {

    &:hover,
    &:focus {
      background-color: var(--color-bg);
    }
  }
}

// buttons that look like regular text links
.button.-link {
  margin: 0;
  padding: 0;

  color: var(--color-primary);
  font-weight: normal;
  font-size: inherit;
  text-decoration: underline;
  vertical-align: baseline;

  background-color: transparent;
  border: none;

  &:hover,
  &:focus,
  &:active {
    text-decoration: none;
  }

  &:focus {
    outline: var(--color-secondary) dotted var(--line-width);
    outline-offset: var(--line-width);
  }
}

// icon buttons, ie. buttons containing only SVG
.button.-icon {
  margin: 0;
  padding: 0;

  color: var(--color-text);

  background-color: transparent;

  >svg {
    margin: 0;

    vertical-align: middle;
  }

  &:focus,
  &:hover {
    border-color: transparent;
  }
}

// hidden button
.button.-hidden {
  visibility: hidden;
}

// to fix multiple-button misalignment
.buttons {
  display: flex;
}

// deal with button groupings
.buttons .button:not(:last-child) {
  margin-right: 0.5rem;
}


.multiselect {
  display: flex;
  flex-direction: column;
  width: 80%;
  background-color: var(--color-bg-dark);

  &.-active {
    outline: 1px solid var(--color-secondary);
  }

  .multiselect-label {}

  .multiselect-fakeselect {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  .multiselect-fakeoptions-container {
    position: relative;
    z-index: 1;

    .multiselect-fakeoptions {
      position: absolute;
      width: 100%;
      background-color: var(--color-bg-dark);
      padding: 0.6rem 0;
      max-height: 300px;
      overflow-y: scroll;
      margin-top: 0.2rem;

      div {
        padding: .6rem 1rem;
        margin: 0.3rem 0.3rem 0.3rem 0.3rem;


      }

      .select-option:hover {
        background-color: var(--color-bg);
      }
    }
  }

  .multiselect-shortcut-input {
    flex: 1;
    padding: 0.4rem 0.2rem !important;
    border-bottom: none !important;
    background-color: var(--color-bg-dark) !important;
  }

  .select-option:focus {
    outline: var(--color-secondary) dotted var(--line-width);
    outline-offset: var(--line-width);
  }

  .multiselect-input {
    border: 1px solid var(--color-bg-dark);
    padding: .1rem 0rem .1rem .4rem;

    display: flex;
    position: relative;
    min-height: 49px;

    .left-container-for-chips {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      flex: 1 1 0%;
      padding: 0.4rem 0rem;

      .form-control {
        flex: 1 1 auto;
        min-width: 4px;



        input {
          flex: 1 1 auto;
        }

      }
    }

    .multiselect-noneselected {
      padding-left: 0.6rem;
      color: inherit;
      opacity: 0.54;
      font-size: 1rem;
    }

    .right-container-for-clearall {
      display: flex;
      flex-direction: column;
      justify-content: space-around;

      button {
        margin: 0 1rem;
        position: relative; // fixes z-fighting
        // z-index: 1;
      }

      svg {
        // color: var(--color-bg-dark);
      }
    }

    .right-container-for-arrow {
      border-left: 1px solid var(--color-text);
      display: flex;
      flex-direction: column;
      justify-content: space-around;

      div {
        padding: 0 1rem;
        flex: 0;
      }

      svg {
        // color: var(--color-bg-dark);
      }
    }
  }


  .multiselect-selected-option {
    font-size: 1rem;

    background-color: var(--color-bg);
    border-radius: 0.1rem;
    margin: 0.1rem 0.1rem;
    // padding: 0.1rem;
    display: flex;
    align-items: center;
    padding-left: 0.4rem;

    .value {
      // this needs revision, the x being close enough to the number but the focus outline is overlapping
      margin-right: 4px;
    }

    button {
      position: relative;
      margin-left: 0.2rem;
      margin-right: 0.2rem;
      margin-top: 0;
      margin-bottom: 0;
      position: relative; // fixes z-fighting
    }

    button:hover {
      color: red;
      background-color: darkred;
    }

    // height: 36px;
    .-icon {
      padding-bottom: 1.5px;
    }
  }
}

select.frequency-select {
  color: var(--color-text);
  background: var(--color-bg-dark);
  box-shadow: none;
  border: none;
  padding: 0.4rem 0.6rem;
  // margin-top: 0.4rem;
  font-size: 1rem;
}

select.frequency-select:focus, select.frequency-select:active {
  outline: var(--color-secondary) dotted var(--line-width);
  outline-offset: var(--line-width);
}
